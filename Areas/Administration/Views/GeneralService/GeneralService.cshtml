@model HMS.Models.ViewModels.GeneralServiceViewModel
@{
    ViewData["Title"] = "Unit";
    Layout = "~/Views/Shared/_HMSMainLayout.cshtml";
}

@section CurrentPageNavigation{
    <h4 class="page-title float-left">SuperAdmin</h4>

    <ol class="breadcrumb float-right">
        <li class="breadcrumb-item"><a href="#">General Service</a></li>
        @*<li class="breadcrumb-item"><a href="#">Register</a></li>*@
    </ol>
}
@{
    <style>
        .btn-default {
            width: 60px;
            background-color: lightgreen;
        }

        .btn-cancel {
            width: 70px;
            background-color: lightcoral;
        }

        .btnUpdateSubmitToggle {
            display: none;
        }
    </style>
}
@section LeftSideMenu{
    <partial name="_AdministrationLeftSideMenuPartial" />
}
<div class="row">
    <div class="col-4">
        <div class="col-12 card-box">
            <form asp-action="GeneralService" method="post" id="formGS">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="GeneralServiceId" class="resetInputValue"/>
                <div class="form-group">
                    <label asp-for="GeneralServiceDescription" class="control-label"></label>
                    <input asp-for="GeneralServiceDescription" class="form-control input-sm resetInputValue" />
                    <span asp-validation-for="GeneralServiceDescription" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="GeneralServicePrice" class="control-label"></label>
                    <input asp-for="GeneralServicePrice" class="form-control input-sm resetInputValue" />
                    <span asp-validation-for="GeneralServicePrice" class="text-danger"></span>
                </div>

                <div class="form-group">
                    @if ((await authorizationService.AuthorizeAsync(User, "GeneralServiceUpdate")).Succeeded)
                    {
                        <button id="btnUpdateSubmit" type="submit" name="btnSubmit" value="Update" class="btn btn-success btnUpdateSubmitToggle">Update</button>
                    }
                    @if ((await authorizationService.AuthorizeAsync(User, "GeneralServiceUpdate")).Succeeded)
                    {
                        <button id="btnSaveSubmit" type="submit" name="btnSubmit" value="Create" class="btn btn-success btnSaveSubmitToggle">Save</button>
                    }
                    <button type="button" class="btn btn-secondary" onclick="ResetFormAndShowHideBtnSubmit('form#formGS')">Cancel</button>
                </div>
            </form>
        </div>
    </div>
    <div class="col-8">
        <div class="col-12">
            <div class="card-box">

                <div class="form-inline m-b-20">
                    <div class="row" style=" width: 48rem;">
                        <div class="col-md-6 text-xs-center" style="display:none;">
                            <div class="form-group">
                                <label class="control-label m-r-5">Status</label>
                                <select id="demo-foo-filter-status" class="form-control input-sm">
                                    <option value="">Show all</option>
                                    <option value="active">Active</option>
                                    <option value="disabled">Disabled</option>
                                    <option value="suspended">Suspended</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6 text-center ">
                            <div class="form-group ">
                                <input id="demo-foo-search" type="text" placeholder="Search" class="form-control input-sm col-10" autocomplete="on">
                            </div>
                        </div>
                    </div>
                </div>
                <table id="demo-foo-filtering" class="table table-striped table-bordered toggle-circle m-b-0" data-page-size="7">
                    <thead>
                        <tr>
                            <th>
                                No.
                            </th>
                            <th>
                                General Service Name
                            </th>
                            <th>
                                Service Price
                            </th>
                            @if ((await authorizationService.AuthorizeAsync(User, "GeneralServiceUpdate")).Succeeded
|| (await authorizationService.AuthorizeAsync(User, "GeneralServiceDelete")).Succeeded)
                            {
                                <th class="text-center thActionMinwidth"><b>Action</b></th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.GeneralServices.Select((value, i) => new { value, i }))
                        {
                            string gsData = Newtonsoft.Json.JsonConvert.SerializeObject(item.value);
                            @*<input type="hidden" asp-for="PageNamesInModule.PageNamesInModuleId" />*@
                            <tr>
                                <td>
                                    @((item.i + 1).ToString())
                                </td>
                                <td>
                                    @item.value.GeneralServiceDescription
                                </td>
                                <td>
                                    @item.value.GeneralServicePrice
                                </td>
                                @if ((await authorizationService.AuthorizeAsync(User, "GeneralServiceUpdate")).Succeeded
|| (await authorizationService.AuthorizeAsync(User, "GeneralServiceDelete")).Succeeded)
                                {
                                    <td style="text-align: center">
                                        @if ((await authorizationService.AuthorizeAsync(User, "GeneralServiceUpdate")).Succeeded)
                                        {
                                            <button onclick="TableRowEditClick(@gsData)" class="btn btn-outline-primary">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                        }

                                        @if ((await authorizationService.AuthorizeAsync(User, "GeneralServiceUpdate")).Succeeded
                                     && (await authorizationService.AuthorizeAsync(User, "GeneralServiceDelete")).Succeeded)
                                        {
                                            <span>|</span>
                                        }
                                        @*<a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info">Details</a> |*@
                                        @if ((await authorizationService.AuthorizeAsync(User, "GeneralServiceDelete")).Succeeded)
                                        {
                                            <button onclick="TableRowDeleteClick('@item.value.GeneralServiceId')" class="btn btn-outline-danger">
                                                <i class="fa fa-trash-alt"></i>
                                            </button>
                                        }
                                    </td>
                                }

                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr class="active">
                            <td colspan="4">
                                <div class="text-right">
                                    <ul class="pagination pagination-split footable-pagination m-t-10 m-b-0"></ul>
                                </div>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>
@{
    ViewData["DeleteConfirmPolicyName"] = "GeneralServiceDelete";
    ViewData["DeleteConfirmActionName"] = "GeneralService";
    ViewData["DeleteConfirmControllerName"] = "GeneralService";
    ViewData["DeleteConfirmAreaName"] = "Administration";
    ViewData["DeleteConfirmParameterName"] = "toDeleteGSId";
}

<partial name="_DeleteConfirmPartial" view-data="ViewData" />

@section Scripts{
    <!-- Counter js  -->
    <script src="~/plugins/waypoints/jquery.waypoints.min.js"></script>
    <script src="~/plugins/counterup/jquery.counterup.min.js"></script>


    <!--FooTable-->
    <script src="~/plugins/footable/js/footable.all.min.js"></script>

    <!--FooTable Example-->
    <script src="~/pages/jquery.footable.js"></script>

    <script>
        jQuery.validator.addMethod("isuniquegs",
            function (value, element, param) {
                var tblJsonData = @Html.Raw(Json.Serialize(Model.GeneralServices));
                var id = $("#GeneralServiceId").val().trim();
                var isCreate = id == null || id == "" || id == "0";
                var message = $(element).attr('data-val-isuniquegs');
                $.validator.messages.isuniquegs = $.validator.format(message, value);
                if (isCreate) {
                    return tblJsonData.filter(d => StringCompareFormat(d.generalServiceDescription) == StringCompareFormat(value)).length == 0;
                } else {
                    return tblJsonData.filter(d => StringCompareFormat(d.generalServiceDescription) == StringCompareFormat(value) && StringCompareFormat(d.generalServiceId) != StringCompareFormat(id)).length == 0;
                }
            });

        $.validator.unobtrusive.adapters.add('isuniquegs',
            function (options) {
                options.rules['isuniquegs'] = options.params;
                if (options.message != null) {
                    $.validator.messages.isuniquegs = options.message;
                }
            }
        );
        $(document).ready(function () {

            var successedAlertMessage = "@ViewBag.SuccessedAlertMessage";
            AlertSnackBarByActionName(successedAlertMessage);

            @*var actionName = "@Model.BtnActionName";
            if (actionName.toLowerCase().trim() == "delete") {
                $("#departmentName").attr("readonly", true);
            }*@
        });
    </script>
}




